
#Область ПрограммныйИнтерфейс

Процедура ВыполнитьНаборКоманд(НаборКоманд, Сценарий, ИмяЛогФайла, ФормаВладелец) Экспорт
		
	ДобавитьСтрокуФайла(ИмяЛогФайла, СтрШаблон(НСтр("ru = '+%1 начало выпонения сценария: %2'"), ТекущаяДата(), Сценарий));
	
	ВыполнитьКоманду(НаборКоманд, НаборКоманд[0], Сценарий, ИмяЛогФайла, ФормаВладелец);

КонецПроцедуры

Процедура ЗаполнитьGitignore(КаталогСборки, КаталогЛогФайлов) Экспорт 
	
	ИмяФайлаGitignore = СтрШаблон("%1\.gitignore", КаталогСборки);
	
	ФайлGitignore = Новый Файл(ИмяФайлаGitignore);
	Если ФайлGitignore.Существует() Тогда
		Возврат;
	КонецЕсли;

	КаталогЛогов = СтрЗаменить(КаталогЛогФайлов, КаталогСборки + "\", "");
	КаталогЛогов = СтрЗаменить(КаталогЛогов, КаталогСборки, "");
	
	ФайлGitignore = Новый ТекстовыйДокумент;
	ФайлGitignore.Записать(ИмяФайлаGitignore, КодировкаТекста.UTF8);
	
	ДобавитьСтрокуФайла(ИмяФайлаGitignore, "**/ConfigDumpInfo.xml");
	ДобавитьСтрокуФайла(ИмяФайлаGitignore, КаталогЛогов + "/**");
	ДобавитьСтрокуФайла(ИмяФайлаGitignore, "build_cf_cfe/**");
	ДобавитьСтрокуФайла(ИмяФайлаGitignore, "*.orig");
	
	СоздатьКаталог(СтрШаблон("%1\build_cf_cfe", КаталогСборки));
	СоздатьКаталог(СтрШаблон("%1\build_cf_cfe\base", КаталогСборки));
	
КонецПроцедуры

Функция МассивКонфликтов(ТекстЛога) Экспорт
	
	МассивКонфликтов = Новый Массив;
	
	МеткаНачалаMergeConflict = "both modified:";
	МеткаКонцаMergeConflict = "Unmerged paths:";
	
	Если СтрНайти(ТекстЛога, МеткаНачалаMergeConflict) > 0 Тогда
		ТекстMergeConflict = СокрЛП(Сред(ТекстЛога, СтрНайти(ТекстЛога, МеткаНачалаMergeConflict), СтрДлина(ТекстЛога))); 
		ТекстMergeConflict = СокрЛП(Сред(ТекстMergeConflict, 0, СтрНайти(ТекстMergeConflict, МеткаКонцаMergeConflict) - 1));
		
		ТекстовыйДокументMergeConflict = Новый ТекстовыйДокумент;
		ТекстовыйДокументMergeConflict.УстановитьТекст(ТекстMergeConflict);
		
		Для НомерСтроки = 1 По ТекстовыйДокументMergeConflict.КоличествоСтрок() Цикл
			ТекСтрока = ТекстовыйДокументMergeConflict.ПолучитьСтроку(НомерСтроки);
			
			Если СтрНайти(ТекСтрока, МеткаНачалаMergeConflict) > 0 Тогда
				ТекСтрока = СокрЛП(СтрЗаменить(ТекСтрока, МеткаНачалаMergeConflict, ""));

				МассивКонфликтов.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МеткаНачалаMergeConflict = "CONFLICT (content): Merge conflict in";
	МеткаКонцаMergeConflict = "Код возврата:";
	
	Если СтрНайти(ТекстЛога, МеткаНачалаMergeConflict) > 0 Тогда
		ТекстMergeConflict = СокрЛП(Сред(ТекстЛога, СтрНайти(ТекстЛога, МеткаНачалаMergeConflict), СтрДлина(ТекстЛога))); 
		ТекстMergeConflict = СокрЛП(Сред(ТекстMergeConflict, 0, СтрНайти(ТекстMergeConflict, МеткаКонцаMergeConflict) - 1));
		
		ТекстовыйДокументMergeConflict = Новый ТекстовыйДокумент;
		ТекстовыйДокументMergeConflict.УстановитьТекст(ТекстMergeConflict);
		
		Для НомерСтроки = 1 По ТекстовыйДокументMergeConflict.КоличествоСтрок() Цикл
			ТекСтрока = ТекстовыйДокументMergeConflict.ПолучитьСтроку(НомерСтроки);
			
			Если СтрНайти(ТекСтрока, МеткаНачалаMergeConflict) > 0 Тогда
				ТекСтрока = СокрЛП(СтрЗаменить(ТекСтрока, МеткаНачалаMergeConflict, ""));

				МассивКонфликтов.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКонфликтов;

КонецФункции

Функция ЛогФайл(КаталогЛогФайла) Экспорт 
	
	СоздатьКаталог(КаталогЛогФайла);
	
	ИмяЛогФайла= СтрШаблон("%1\%2.log", КаталогЛогФайла, Строка(Новый УникальныйИдентификатор));
	
	ЛогФайл = Новый ТекстовыйДокумент;
	ЛогФайл.Записать(ИмяЛогФайла, КодировкаТекста.UTF8);
	
	Возврат ИмяЛогФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриПолученииРезультатаЗапускаПрограммы(Результат, ДополнительныеПараметры) Экспорт
	
	НаборКоманд	  = ДополнительныеПараметры.НаборКоманд;
	Сценарий	  = ДополнительныеПараметры.Сценарий;
	ИмяЛогФайла	  = ДополнительныеПараметры.ИмяЛогФайла;
	ФормаВладелец = ДополнительныеПараметры.ФормаВладелец;
	
	НаборКоманд.Удалить(0);

	Тексты = Новый Массив;
	ДобавитьРезультатВыполнения(Тексты, "Код возврата", СокрЛП(Результат.КодВозврата));
	ДобавитьРезультатВыполнения(Тексты, "Поток вывода", СокрЛП(Результат.ПотокВывода));
	ДобавитьРезультатВыполнения(Тексты, "Поток ошибок", СокрЛП(Результат.ПотокОшибок)); 

	ТекстСообщения = СтрСоединить(Тексты, Символы.ПС);
	
	ДобавитьСтрокуФайла(ИмяЛогФайла, СтрШаблон(НСтр("ru = '%1%2-%3 выполнено'"), ТекстСообщения, Символы.ПС, ТекущаяДата()));
	
	Если НаборКоманд.Количество() > 0 Тогда
		Оповестить("сп_ПрочитатьЛогФайла");
		ВыполнитьКоманду(НаборКоманд, НаборКоманд[0], Сценарий, ИмяЛогФайла, ФормаВладелец);
	Иначе 
		ДобавитьСтрокуЛогаКонецВыполненияСценария(ИмяЛогФайла, Сценарий);
		Оповестить("сп_ПрочитатьЛогФайла");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСтрокуФайла(ИмяФайла, СтрокаФайла)
	Попытка
		ЛогФайл = Новый ТекстовыйДокумент;
		ЛогФайл.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
		ЛогФайл.ДобавитьСтроку(СтрокаФайла);
		ЛогФайл.Записать(ИмяФайла, КодировкаТекста.UTF8);
	Исключение       
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Сборщик проектов", "Ошибка", СтрокаФайла);
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьКоманду(НаборКоманд, СтрокаКоманды, Сценарий, ИмяЛогФайла, ФормаВладелец)
	
	Если ФормаВладелец = Неопределено Или ФормаВладелец.Объект.ПрерватьВыполнениеКоманд = Истина Тогда
		ТекстСообщения = НСтр("ru = 'Выполнено ""Прервать выполнениеКоманд"".'");
		
		ДобавитьСтрокуФайла(ИмяЛогФайла, ТекстСообщения);
		ДобавитьСтрокуЛогаКонецВыполненияСценария(ИмяЛогФайла, Сценарий);
		
		Оповестить("сп_ПрочитатьЛогФайла");
		
		Если Не ФормаВладелец = Неопределено Тогда
			ФормаВладелец.Объект.ПрерватьВыполнениеКоманд = Ложь;
		КонецЕсли;
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "#$КаталогЛогФайлов$#", ИмяЛогФайла);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "#$комментарий$#", СтрШаблон("%1: %2", Строка(Сценарий), ТекущаяДата()));
	
	ДобавитьСтрокуФайла(ИмяЛогФайла, СтрШаблон(НСтр("ru = '+%1 команда: %2'"), ТекущаяДата(), СтрокаКоманды));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЛогФайла"	, ИмяЛогФайла);
	ДополнительныеПараметры.Вставить("НаборКоманд"	, НаборКоманд);
	ДополнительныеПараметры.Вставить("Сценарий"	  	, Сценарий);
	ДополнительныеПараметры.Вставить("ФормаВладелец", ФормаВладелец);
	
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.КодировкаПотоков	  = КодировкаТекста.UTF8;
	ПараметрыЗапускаПрограммы.КодировкаИсполнения = "OEM";
	ПараметрыЗапускаПрограммы.Оповещение = Новый ОписаниеОповещения("ПриПолученииРезультатаЗапускаПрограммы", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

Процедура ДобавитьСтрокуЛогаКонецВыполненияСценария(ИмяЛогФайла, Сценарий)
	
	ДобавитьСтрокуФайла(ИмяЛогФайла, СтрШаблон(НСтр("ru = '-%1 конец выпонения сценария: %2'"), ТекущаяДата(), Сценарий));
	
КонецПроцедуры

Процедура ДобавитьРезультатВыполнения(Тексты, ИмяДанныхЛога, ДанныеЛога)
	Если ЗначениеЗаполнено(ДанныеЛога) Тогда
		ФорматированныйТекст = Новый Массив;
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ДанныеЛога);
		
		Для НомерСтроки = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
			ФорматированныйТекст.Добавить(СтрШаблон("	%1", ТекСтрока));
		КонецЦикла;

		Тексты.Добавить(СтрШаблон(НСтр("ru = '%1'"), СтрСоединить(ФорматированныйТекст, Символы.ПС)));
	КонецЕсли;
	
	Тексты.Добавить(СтрШаблон(НСтр("ru = '%1:'"), ИмяДанныхЛога));
КонецПроцедуры

#КонецОбласти